{"name":"Iterated Function Systems","tagline":"15-662 Graphics Project 5 Report","body":"**Team: Ganesh Nunnagoppula (gnunnago), Archit Karandikar (akarandi)**\r\n\r\n\r\n# Description\r\n\r\nIn this project, we have extended Assignment 1 code to support rendering fractals. We support fractal specifications through svg files by extending the svg parser.\r\n\r\nThe following were the goals originally proposed,\r\n\r\n* Modify the p1 code to implement the IFS for the Sierpensky Traingle. Rasterize the image.\r\n* Implement the IFS for the Barnsley Fern. Rasterize the image.\r\n3. Formalize a IFS-specification file format and implement the corresponding parser which renders a specified IFS.\r\n4. Modify the rendering procedure using an energy buffer and plot normalized irradiances.\r\n5. Render the background so that intensity falls off with increasing distance from the fractal.\r\n6. Replace the chaos game implementation with an implementation of the fractal frame algorithm.to implement log-density dsiplay rendering and coloured fractals.  \r\n\r\nAdditional milestones:\r\n* Create and render some IFSs which use the features mentioned above.\r\n8. Add support for colour specification in the IFS-specification file.\r\n9. Add key-based support for stepping through the fractal rendering process.\r\n\r\nWe essentially completed all of these goals with the exception of adding key-based support and log-density display.\r\n\r\n#SVG Parser\r\n\r\nWe support IFS spec parsing, in three forms:\r\n* List of weighted transforms (type '0')\r\n* Sierpensky Polygons (type '1')\r\n* Fractal Flames (type '2')\r\n\r\nSVG file for Barnsley fern\r\n```sh\r\n<svg height=\"600\" width=\"600\">\r\n\t<ifs\r\n\t\tfill=\"#00ff00\"\r\n\t\tbg=\"002E00\"\r\n\t\ttype=\"1\"\r\n\t\tseedx=\"0\"\r\n\t\tseedy=\"0\"\r\n\t\tweighted_transform_1=\"matrix(0,0,0,0.16,0,0),1\"\r\n\t\tweighted_transform_2=\"matrix(0.85,-0.04,0.04,0.85,0,1.6),85\"\r\n\t\tweighted_transform_3=\"matrix(0.2,0.23,-0.26,0.22,0,1.6),7\"\r\n\t\tweighted_transform_4=\"matrix(-0.15,0.26,0.28,0.24,0,0.44),7\"\r\n\t\trender_transformation=\"matrix(85.71,0,0,50.0,300.0,50.0)\"\r\n\t/>\r\n</svg>\r\n```\r\nSVG file for sierpensky polygons\r\n```sh\r\n<svg height=\"600\" width=\"600\">\r\n\t<ifs\r\n\t\tfill=\"#0000ff\"\r\n\t\tbg=\"0000ff\"\r\n\t\ttype=\"0\"\r\n\t\tseedx=\"300\"\r\n\t\tseedy=\"300\"\r\n\t\tnumPoints=\"3\"\r\n\t\tratio=\"0.6\"\r\n\t\tweighted_transform_1=\"matrix(0,0,0,0.16,0,0),1\"\r\n\t\tweighted_transform_2=\"matrix(0.85,-0.04,0.04,0.85,0,1.6),85\"\r\n\t\tweighted_transform_3=\"matrix(0.2,0.23,-0.26,0.22,0,1.6),7\"\r\n\t\tweighted_transform_4=\"matrix(-0.15,0.26,0.28,0.24,0,0.44),7\"\r\n\t\trender_transformation=\"matrix(1,0,0,0,1.0,0)\"\r\n\t/>\r\n</svg>\r\n```\r\nThe description of various keys:\r\n```sh\r\nfill: the fill color\r\nbg: the background color\r\nseed: Specifies the initial seed point\r\nnum_points: specifies the number of vertices\r\nratio: specifies the averaging ratio for every iteration\r\nradius: specifies the radius of the circumcircle of the polygon\r\ntype: '0' specifies Sierpensky traingles, '1' implies Barnsley fern, '2' specifies fractal flames.\r\nweighted_transform_<i>: specifies the affine transform and its corresponding probability\r\nrender_transformation: specifies the post transform\r\n```\r\n\r\n#Sierpensky Triangles\r\n\r\nWe first rendered the Sierpensky triangle. The distance-based shading seen in the figure was rendered later.\r\n\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/ST_bg.png?raw=true)\r\n\r\n#Barnsley ferns\r\n\r\nNext, we implemented the Barnsley Fern.\r\n\r\nwithout super sampling\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fern_s1.png?raw=true)\r\n\r\nwith supersampling at 16X\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fern_s16.png?raw=true)\r\n\r\n#Irradiance Caching\r\n\r\nWe add bilinear interpolation weights as energies to the buffer and later normalize them, tweaking the exponent to 0.5 to obtain better results. We refer to this as irradiance caching. It results in better-looking figures than directly plotting points.\r\n\r\n#Distance Function\r\n\r\nWe do on O(# pixels) BFS to find the least manhattan distance from each grid cell to some point on the fractal. We colour points according to this distance, once again tweaking the constant. \r\n\r\n#Fractal Flames\r\n\r\nWe implemented the fractal flame algorithm with color assigned to each affine transformation and a nonlinear variation after performing an affine transformation. The variation we used is\r\n```sh\r\nx = sin(x)\r\ny = sin(y)\r\n```\r\nThe following is an image generated with a linear variation as described in the paper. Each of the 3 affine transformations were assigned the colors red, green and blue. The affine transformations used were the same as that of sierpensky triangles.\r\n\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp8.png?raw=true)\r\n\r\nThe following is an image generated with the sinusoidal variation\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fractal%20frame/sinPattern.png?raw=true)\r\n\r\nThe following is an image generated with the sinusoidal variation with a different set of affine transformations\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fractal%20frame/RedPattern.png?raw=true)\r\n\r\n#Custom Fractals\r\n\r\nWe generalized the sierpensky triangles to sierpensky polygons, as specified in the IFS file details. Some of the results are depicted here:\r\n\r\nImage generated with 3 vertices and ratio 0.6\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp1.png?raw=true)\r\n\r\nImage generated with 12 vertices and ratio 0.22\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp2.png?raw=true)\r\n\r\nImage generated with 8 vertices and ratio 0.4\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp3.png?raw=true)\r\n\r\nImage generated with 5 vertices and ratio 0.38\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp4.png?raw=true)\r\n\r\nImage generated with 16 vertices and ratio -0.25\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp5.png?raw=true)\r\n\r\nImage generated with 3 vertices and ratio -0.5\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp6.png?raw=true)\r\n\r\nImage generated with 4 vertices and ratio 0.42\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp7.png?raw=true)\r\n\r\nImage generated with 6 vertices and ratio 0.5\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp9.png?raw=true)\r\n\r\n#Build Instructions\r\n\r\nThe code can be found in the following location\r\n```sh\r\n/afs/cs/academic/class/15462-f15-users/gnunnago/asst5/\r\n``` \r\n\r\nFor building the code, run the following instructions\r\n```sh\r\nmkdir build && cd build\r\ncmake ../src\r\nmake && make install\r\n```\r\n\r\n\r\n#Acknowledgements\r\nWe thank Bryce for his help and Professors Kavyon and Keenan for a wonderful course. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}