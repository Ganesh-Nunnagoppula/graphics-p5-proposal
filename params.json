{"name":"Iterated Function Systems","tagline":"15-662 Graphics Project 5 Proposal","body":"**Team: Ganesh Nunnagoppula (gnunnago), Archit Karandikar (akarandi)**\r\n\r\n\r\n*Description*\r\n\r\nIn this project, we extended Assignment1 code to support rendering fractals. We support fractal specifications through svg file.\r\n\r\nThe following were the goals proposed,\r\n\r\n* Modify the p1 code to implement the IFS for the Sierpensky Traingle. Rasterize the image.\r\n* Implement the IFS for the Barnsley Fern. Rasterize the image.\r\n3. Formalize a IFS-specification file format and implement the corresponding parser which renders a specified IFS.\r\n4. Modify the rendering procedure using an energy buffer and plot normalized irradiances.\r\n5. Render the background so that intensity falls off with increasing distance from the fractal.\r\n6. Replace the chaos game implementation with an implementation of the fractal frame algorithm.to implement log-density dsiplay rendering and coloured fractals.  \r\n\r\nAdditional milestones:\r\n* Create and render some IFSs which use the features mentioned above.\r\n8. Add support for colour specification in the IFS-specification file.\r\n9. Add key-based support for stepping through the fractal rendering process.\r\n\r\nWe completed all the tasks except adding a key based support.\r\n\r\n*SVG Parser*\r\n\r\n```sh\r\n<svg height=\"600\" width=\"600\">\r\n\t<ifs\r\n\t\tfill=\"#00ff00\"\r\n\t\tbg=\"002E00\"\r\n\t\ttype=\"1\"\r\n\t\tseedx=\"0\"\r\n\t\tseedy=\"0\"\r\n\t\tweighted_transform_1=\"matrix(0,0,0,0.16,0,0),1\"\r\n\t\tweighted_transform_2=\"matrix(0.85,-0.04,0.04,0.85,0,1.6),85\"\r\n\t\tweighted_transform_3=\"matrix(0.2,0.23,-0.26,0.22,0,1.6),7\"\r\n\t\tweighted_transform_4=\"matrix(-0.15,0.26,0.28,0.24,0,0.44),7\"\r\n\t\trender_transformation=\"matrix(85.71,0,0,50.0,300.0,50.0)\"\r\n\t/>\r\n</svg>\r\n```\r\n\r\n```sh\r\nfill: the fill color\r\nbg: the background color\r\nseed: Specifies the initial seed point\r\ntype: '0' specifies Sierpensky traingles, '1' implies Barnsley farms, '2' specifies fractal flames.\r\nweighted_transform_<i>: specifies the affine transform and its corresponding probability\r\nrender_transformation: specifies the post transform\r\n```\r\n\r\n*Sierpensky Triangles*\r\n\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/ST_bg.png?raw=true)\r\n\r\n*Barnsley farms*\r\n\r\nwithout super sampling\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fern_s1.png?raw=true)\r\n\r\nwith supersampling at 16X\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fern_s16.png?raw=true)\r\n\r\n*Irradiance Caching*\r\n\r\n\r\n\r\n*Distance Function*\r\n\r\n*Fractal Flames*\r\n\r\nWe implemented the fractal flame algorithm with color assigned to each affine transformation and a nonlinear variation after performing an affine transformation. The variation we used is\r\n```sh\r\nx = sin(x)\r\ny = sin(y)\r\n```\r\nThe following is an image generated with a linear variation that is variation0 and each of the 3 affine transformations were assigned the colors red, green and blue. The affine transformations used were the same as that of sierpensky triangles.\r\n\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp8.png?raw=true)\r\n\r\nThe following is an image generated with the sinusoidal variation\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fractal%20frame/sinPattern.png?raw=true)\r\n\r\nThe following is an image generated with the sinusoidal variation with a different set of affine transformations\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/fractal%20frame/RedPattern.png?raw=true)\r\n\r\n*Custom Fractals*\r\n\r\nWe generalized the sierpensky triangles to a polygon with a ration specified\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp1.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp2.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp3.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp4.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp5.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp6.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp7.png?raw=true)\r\n\r\nImage generated with <> vertices and ratio <>\r\n![](https://github.com/Ganesh-Nunnagoppula/graphics-p5-proposal/blob/master/images/sierpensky/sp9.png?raw=true)\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\nIterated Function Systems start with a seed point and specify a Probability Distribution Function over affine transformations. In every iteration. the point is plotted and transformed according to the specified distribution.\r\n\r\nWe plan on attaining the following milestones for the project:\r\n* Modify the p1 code to implement the IFS for the Sierpensky Traingle. Rasterize the image.\r\n* Implement the IFS for the Barnsley Fern. Rasterize the image.\r\n3. Formalize a IFS-specification file format and implement the corresponding parser which renders a specified IFS.\r\n4. Modify the rendering procedure using an energy buffer and plot normalized irradiances.\r\n5. Render the background so that intensity falls off with increasing distance from the fractal.\r\n6. Replace the chaos game implementation with an implementation of the fractal frame algorithm.to implement log-density dsiplay rendering and coloured fractals.  \r\n\r\nThe following additional milestones will be attained subject to time constraints:\r\n* Create and render some IFSs which use the features mentioned above.\r\n8. Add support for colour specification in the IFS-specification file.\r\n9. Add key-based support for stepping through the fractal rendering process.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}